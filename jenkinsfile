pipeline {
    agent any
    tools {
        maven 'maven-3.9.9'
    }
    environment {
        KUBECONFIG_PATH = "/kubecfg/cfg"
    }
    stages{
        
        stage("load script"){
            steps {
                script {
                    gs = load "script.groovy"
                }
            }
        }

        stage('increment version'){
            steps {
                script {
                    echo 'incrementing app version ...'
                    // Increment minor version in pom.xml using Maven build helper plugin
                    sh 'mvn build-helper:parse-version versions:set \
                    -DnewVersion="\\\${parsedVersion.majorVersion}.\\\${parsedVersion.nextMinorVersion}" \
                    versions:commit'
                    // Read the new version from pom.xml
                    def match = readFile('pom.xml') =~ '<version>(.+)</version>'
                    def version = match[0][1]           // get the first match
                    env.IMAGE_VERSION = "$version"      // set the version environment variable
                }
            }
        }

        stage("build jar"){
            steps {
                script {
                    gs.jar_build()
                }
            }
        }

        stage("build & push image"){
            steps{
                script {
                    gs.image_build(
                        'hamdiz0/java-maven-app',   // image name
                        IMAGE_VERSION,              // version
                        'docker-repo',              // credentailsID
                        '.'                         // dockerfile location
                    )
                }
            }
        }

        stage("updated yaml files version"){
            steps {
                script {
                    gs.update_yaml_version(
                        "k8s-manifests",            // yaml files and script location (same directory)
                        "change_version.sh",        // change version script name (.sh)
                        IMAGE_VERSION              
                    )
                }
            }
        }

        stage("deploy"){
            steps {
                script {
                    gs.deploy(
                        "k8s-manifests",            // yaml files location
                        "deploy.sh",                // deployment script name (.sh)
                        KUBECONFIG_PATH,            // kubeconfig absolute path in the jenkins container
                    )
                }
            }
        }

        stage("push changes"){
            steps {
                script {
                    gs.git_push(
                        'github.com/hamdiz0/java-maven-app.git',    //url without "https://"
                        'github-api-token',                         //credentialsId
                        "updated to version ${IMAGE_VERSION}",      //commit message
                        'main'                                      //branch
                    )
                }
            }
        }
    }
}
